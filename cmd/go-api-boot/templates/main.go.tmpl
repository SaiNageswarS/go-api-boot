package main

import (
	"github.com/SaiNageswarS/go-api-boot/dotenv"
	"github.com/SaiNageswarS/go-api-boot/server"
	"github.com/rs/cors"
)

type AppConfig struct {
	BootConfig  `ini:",extends"`
	CustomField string `env:"CUSTOM-FIELD" ini:"custom_field"`
}

func main() {

	// Load secrets and config
	dotenv.LoadEnv()
	// Pick a cloud provider – all implement cloud.Cloud
	cloudFns := cloud.Azure{}
	// load secrets from Keyvault/SecretManader
	cloudFns.LoadSecretsIntoEnv()

	// load config file
	ccfg := &AppConfig{} 
	config.LoadConfig("config.ini", ccfg)

	mongoClient, err := odm.GetClient(ccfg.MongoURI)
	if err != nil {
		logger.Fatal("Failed to connect to MongoDB", zap.Error(err))
	}

	boot, err := server.New().
		GRPCPort(":50051").        // or ":0" for dynamic
		HTTPPort(":8080").
		EnableSSL(server.CloudCacheProvider(cfg, cloudFns)).
		// Dependency injection
		Provide(ccfg).
		ProvideAs(cloudFns, (*cloud.Cloud)(nil)).
		ProvideAs(mongoClient, (*odm.MongoClient)(nil)).
		// Register gRPC service impls
		RegisterService(server.Adapt(pb.RegisterLoginServer), ProvideLoginService).
		Build()

	if err != nil {
		logger.Fatal("Dependency Injection Failed", zap.Error(err))
	}

	ctx, cancel := context.WithCancel(context.Background())
	// catch SIGINT ‑> cancel
	_ = boot.Serve(ctx)
}