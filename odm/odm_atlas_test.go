// Tests for odm Atlas integration.

package odm

import (
	"encoding/csv"
	"io"
	"os"
	"strconv"
	"strings"
	"testing"

	"github.com/SaiNageswarS/go-api-boot/dotenv"
	"github.com/SaiNageswarS/go-collection-boot/async"
	"github.com/stretchr/testify/assert"
	"go.mongodb.org/mongo-driver/v2/bson"
)

type EmbeddedMovies struct {
	ID            string      `bson:"_id"`
	Plot          string      `bson:"plot"`
	Year          int         `bson:"year"`
	Cast          []string    `bson:"cast"`
	Languages     []string    `bson:"languages"`
	Directors     []string    `bson:"directors"`
	Genres        []string    `bson:"genres"`
	PlotEmbedding bson.Vector `bson:"plotEmbedding"`
	Title         string      `bson:"title"`
}

func (m EmbeddedMovies) Id() string {
	if len(m.ID) == 0 {
		m.ID, _ = HashedKey(m.Title, strconv.Itoa(m.Year))
	}

	return m.ID
}

func (m EmbeddedMovies) CollectionName() string {
	return "embedded_movies"
}

// Specify Vector Index for plot embeddings
func (m EmbeddedMovies) VectorIndexSpecs() []VectorIndexSpec {
	return []VectorIndexSpec{
		{
			Name:          "plotEmbeddingIndex",
			Path:          "plotEmbedding",
			Type:          "vector",
			NumDimensions: 2048,
			Similarity:    "cosine",
			Quantization:  "scalar",
		},
	}
}

// Specify Term Search Index for plot text
func (m EmbeddedMovies) TermSearchIndexSpecs() []TermSearchIndexSpec {
	return []TermSearchIndexSpec{
		{
			Name: "plotIndex",
			// building term index on both plot and title fields.
			// This allows searching by title as well as plot text.
			Paths: []string{"plot", "title"},
		},
	}
}

func TestEmbeddedMoviesCollection(t *testing.T) {
	dotenv.LoadEnv("../.env")
	ctx := t.Context()

	mongo := ProvideMongoClient()

	defer func() { mongo.Disconnect(ctx) }()

	tenant := "apiboot_test"
	collection := CollectionOf[EmbeddedMovies](mongo, tenant)
	assert.NotNil(t, collection, "Failed to get collection for EmbeddedMovies")

	// Create Vector Index for plot embeddings and term index for plot text.
	err := EnsureIndexes[EmbeddedMovies](ctx, mongo, tenant)
	assert.NoError(t, err, "Failed to ensure vector index for EmbeddedMovies")

	// Save fixtures
	fixtures, err := parseTestFixture("../fixtures/odm/embedded_movies_data.tsv")
	assert.NoError(t, err, "Failed to parse test fixture")

	for _, movie := range fixtures {
		_, err := async.Await(collection.Save(ctx, movie))
		assert.NoError(t, err, "Failed to save movie from fixture")
	}

	// cleanup after vector index test
	defer func() {
		for _, movie := range fixtures {
			_, err := async.Await(collection.DeleteByID(ctx, movie.Id()))
			assert.NoError(t, err, "Failed to delete movie after vector index test")
		}
	}()

	t.Run("TestFind", func(t *testing.T) {
		// Find the movie by ID
		movieById, err := async.Await(collection.FindOneByID(ctx, fixtures[0].Id()))
		assert.NoError(t, err, "Failed to find movie by ID")
		assert.NotNil(t, movieById, "Movie should not be nil")
		assert.Equal(t, fixtures[0].Plot, movieById.Plot, "Plot should match")

		// Find movies of 1982
		movies1982, err := async.Await(collection.Find(ctx, bson.M{"year": 1982}, nil, 0, 0))
		assert.NoError(t, err, "Failed to find movies of 1982")
		assert.NotEmpty(t, movies1982, "Movies of 1982 should not be empty")
		assert.Len(t, movies1982, 2, "There should be 2 movies from 1982")
		assert.Equal(t, "The Shaolin Temple", movies1982[0].Title, "First movie should be The Shaolin Temple")
		assert.Equal(t, "Death Wish II", movies1982[1].Title, "Second movie should be Death Wish II")

		// test limit
		movies1982, err = async.Await(collection.Find(ctx, bson.M{"year": 1982}, nil, 1, 0))
		assert.NoError(t, err, "Failed to find movies of 1982")
		assert.NotEmpty(t, movies1982, "Movies of 1982 should not be empty")
		assert.Len(t, movies1982, 1, "There should be 1 movies from 1982")
	})

	t.Run("TestDistinct", func(t *testing.T) {
		// Test distinct year
		distinctYears := make([]int, 0)
		err := collection.DistinctInto(ctx, "year", nil, &distinctYears)
		assert.NoError(t, err, "Failed to get distinct years")
		assert.NotEmpty(t, distinctYears, "Distinct years should not be empty")
		assert.Len(t, distinctYears, 2, "There should be 2 distinct years")
		assert.Contains(t, distinctYears, 1981, "Distinct years should contain 1981")
		assert.Contains(t, distinctYears, 1982, "Distinct years should contain 1982")

		// Test distinct genres
		distinctGenres := make([]string, 0)
		err = collection.DistinctInto(ctx, "genres", nil, &distinctGenres)
		assert.NoError(t, err, "Failed to get distinct genres")
		assert.NotEmpty(t, distinctGenres, "Distinct genres should not be empty")
		assert.Len(t, distinctGenres, 9, "There should be 9 distinct genres")
		assert.Contains(t, distinctGenres, "Adventure", "Distinct genres should contain Adventure")
	})

	t.Run("TestVectorIndex", func(t *testing.T) {
		// Perform vector search
		// query := "shaolin medieval kings war"
		embedding := []float32{-0.00689697, 0.01647949, 0.01159668, 0.02246094, 0.03417969, -0.02380371, -0.0234375, -0.04516602, -0.00897217, -0.00312805, -0.01782227, -0.01281738, -0.00076675, 0.03808594, -0.03442383, 0.01818848, 0.01013184, -0.04663086, 0.03881836, -0.04956055, -0.03955078, -0.0168457, 0.00915527, 0.02185059, -0.02441406, -0.01904297, 0.00074387, 0.00732422, -0.01721191, 0.01428223, -0.00683594, 0.00102234, 0.01092529, -0.01977539, -0.01843262, -0.02319336, -0.0065918, -0.00097656, -0.01251221, 0.02954102, 0.02624512, -0.01483154, -0.05175781, -0.02832031, -0.01733398, 0.02478027, 0.01507568, -0.05566406, -0.02062988, -0.01177979, 0.00198364, 0.01251221, -0.05932617, -0.03063965, 0.0067749, 0.01464844, 0.00823975, -0.0201416, 0.00939941, 0.00946045, 0.01116943, -0.00119781, -0.03222656, 0.00405884, 0.00799561, -0.03710938, 0.01165771, 0.00363159, -0.0043335, -0.01757812, -0.01196289, -0.03369141, 0.03149414, -0.03088379, -0.05810547, 0.02819824, -0.00041008, -0.0145874, -0.01733398, -0.01757812, 0.02746582, -0.02441406, 0.0145874, -0.00218201, -0.01159668, 0.02636719, 0.00106812, -0.00323486, 0.01037598, -0.00970459, 0.00534058, -0.04003906, 0.03930664, 0.0201416, 0.00238037, -0.00723267, -0.01269531, 0.00054169, -0.01013184, -0.01269531, -0.00842285, 0.03173828, 0.03564453, 0.0057373, 0.00854492, 0.00836182, 0.04541016, -0.0267334, 0.01062012, 0.01330566, 0.03662109, -0.01599121, 0.02966309, 0.00056458, -0.02453613, 0.01251221, 0.01519775, 0.03564453, -0.00491333, 0.01123047, 4.84e-05, 0.03979492, 0.00457764, 0.01116943, 0.04467773, 0.0014267, 0.0168457, -0.01721191, 0.05053711, 0.00695801, 0.02294922, 0.00018406, 0.02075195, 0.00390625, 0.00546265, 0.0234375, -0.0168457, 0.02819824, 0.03149414, 0.00854492, -0.01513672, 0.01025391, 0.01507568, -0.00842285, -0.00509644, -0.01312256, 0.01153564, -0.01068115, -0.01647949, 0.01867676, 0.0007019, 0.00650024, -0.03222656, 0.01190186, -0.01141357, 0.00292969, 0.01409912, -0.0255127, -0.0067749, -0.04174805, 0.0078125, -0.01513672, 0.00195312, -0.00354004, -0.00616455, 0.0043335, 0.00619507, -0.02844238, 0.04443359, -0.02294922, -0.02905273, -0.03735352, 0.02587891, -0.0078125, -0.01806641, -0.00311279, 0.03759766, 0.03637695, 0.02478027, 0.00358582, 0.02758789, 0.00463867, 0.02038574, -0.00288391, 0.0279541, 0.00854492, 0.01013184, -0.05224609, -0.00113678, 0.02246094, -0.02099609, -0.04101562, 0.00897217, -0.04321289, 0.01806641, -0.00585938, 0.04125977, -0.00799561, 0.02758789, 0.00683594, -0.00112152, -0.01031494, 0.02185059, 0.01177979, 0.01464844, -0.01153564, 0.00102997, -0.00131989, 0.02258301, 0.02612305, 0.00537109, -0.01177979, 0.00982666, 0.01373291, -0.00823975, 0.00190735, 0.03271484, -0.00741577, -0.02270508, 0.0123291, 0.0100708, 0.01208496, 0.00019932, 0.01263428, -0.02539062, -0.02026367, -0.02661133, -0.04711914, 0.00543213, -0.02331543, -0.00860596, -0.02160645, -0.00317383, -0.0045166, 0.00698853, -0.00184631, 0.02783203, 0.01708984, -0.0001297, 0.03149414, 0.00245667, 0.01806641, -0.00964355, -0.04418945, -0.01721191, 0.02319336, 0.01574707, 0.01098633, -0.01806641, -0.03295898, 0.01367188, -0.00823975, -0.02197266, 0.0043335, 0.02172852, -0.01080322, -0.03320312, 0.02270508, -0.00897217, 0.02624512, 0.03710938, -0.0222168, -0.03198242, 0.00750732, -0.02514648, -0.0234375, 0.00811768, 0.00946045, 0.0065918, 0.00836182, -0.01855469, -0.04638672, 0.01098633, -0.000144, 0.00139618, -0.01647949, -0.02844238, -0.01409912, -0.01135254, 0.02172852, 0.015625, -0.02734375, 0.01373291, -0.02856445, 0.03955078, 0.01257324, -0.01721191, -0.00314331, 0.00775146, 0.0003109, 0.00994873, -0.00210571, 0.02319336, -0.01477051, -0.04467773, 0.02722168, -0.03710938, 0.01428223, -0.00227356, -0.00579834, -0.03442383, -0.00369263, 0.0004921, -0.0032959, 0.02172852, -0.00848389, -0.02941895, -0.0534668, -0.02563477, 0.02661133, -0.02441406, -0.03027344, -0.01330566, 0.00512695, -0.02331543, 0.0037384, 0.0279541, 0.01501465, 0.00114441, 0.00909424, -0.01507568, -0.02648926, 0.00698853, 7.963e-05, 0.02050781, -0.01867676, -0.00034332, -0.01544189, 0.01092529, 0.0090332, 0.04321289, 0.06005859, -0.02001953, -0.02197266, 0.01757812, -0.00387573, 0.00265503, 0.00031281, 0.02331543, -0.00534058, 0.01757812, 0.02539062, 0.03125, -0.00476074, 0.00631714, 0.05883789, -0.00878906, -0.0480957, -0.02526855, 0.02746582, 0.03320312, 0.02087402, 0.02368164, -0.00358582, -0.00077057, 0.0378418, 0.05004883, 0.02270508, -0.0234375, 0.00457764, -0.01660156, -0.00308228, 0.00558472, 0.00341797, 0.0062561, 0.02893066, -0.00720215, -0.0291748, -0.02526855, 0.00146484, -0.00445557, -0.02661133, 0.00561523, 0.01416016, 0.01226807, -0.01647949, 0.00823975, 0.01135254, -0.01141357, -0.01190186, 0.05078125, 0.01721191, 0.03442383, 0.00038528, 0.03173828, -0.001091, 0.03344727, -0.01116943, 0.02758789, 0.05273438, 0.01611328, 0.02319336, 0.01782227, 0.01904297, -0.01446533, 0.03881836, 0.01531982, -0.02575684, 0.00488281, -0.01660156, 0.00106812, -0.00070572, 0.01660156, 0.00497437, -0.02185059, -0.04174805, 0.02160645, -0.03613281, 0.03540039, 0.00430298, -0.0135498, 0.02062988, 0.00521851, 0.00558472, 0.01043701, -0.03063965, -0.01879883, -0.01721191, -0.03125, -0.00137329, 0.00442505, -0.0177002, 0.01257324, -0.01672363, -0.00096512, 0.00927734, -0.01043701, -0.00982666, -0.04296875, 0.0279541, 0.02600098, 0.00384521, 0.02539062, -0.03881836, -0.00349426, 0.02392578, 0.01965332, -0.00191498, 0.00860596, 0.04956055, 0.00276184, -0.01141357, 0.03369141, -0.0098877, 0.05322266, -0.03039551, -0.00415039, 0.01422119, -0.01104736, -0.00717163, 0.03222656, -0.01055908, 0.00830078, -0.02380371, -0.05493164, 0.01416016, 0.03442383, -0.00056839, -0.02978516, -0.01025391, -0.00836182, 0.00183868, -0.00830078, 0.01397705, -0.01147461, -0.01806641, 0.0008049, 0.00114441, -0.01782227, 0.0062561, -0.01867676, 0.00592041, -0.04248047, -0.04614258, 0.00075912, 0.02539062, -0.02124023, -0.01611328, -0.00595093, 0.01379395, -0.02758789, -0.02075195, -0.03466797, 0.02148438, -0.01708984, -0.0078125, -0.03979492, -0.00047302, 0.01379395, 0.0144043, -0.01477051, -0.01574707, -0.01904297, -0.05151367, 0.00469971, -0.00714111, -1.705e-05, 0.02160645, -0.00479126, 0.01391602, -0.0062561, 0.03051758, -0.01275635, 0.00494385, -0.01940918, 0.00982666, 0.02587891, 0.03015137, 0.02282715, 0.02734375, -0.03466797, 0.01495361, -0.03125, 0.0189209, 0.02600098, 0.00665283, 0.03100586, -0.01141357, 0.01257324, -0.0213623, -0.00274658, 0.02197266, -0.02575684, 0.00891113, -0.02587891, 0.02575684, 0.0090332, 0.01513672, 0.01538086, 0.03955078, 0.00787354, -0.00369263, -0.05029297, 0.0300293, 0.00830078, 0.00909424, -0.01318359, -0.00683594, -0.02709961, 0.02941895, -0.02880859, 0.03637695, 0.01635742, -0.01574707, 0.02124023, -0.05493164, -0.0291748, -0.00031662, 0.00098419, -0.01000977, 0.02783203, 0.015625, -0.00723267, -0.01226807, 0.01818848, 0.01104736, 0.00762939, 0.00334167, 0.01623535, 0.01635742, -0.01733398, 0.00741577, 0.02294922, 0.00349426, 0.0189209, 0.04321289, 0.01416016, 0.02197266, -0.01068115, -0.01397705, -0.02307129, 0.03344727, -0.05908203, 0.01104736, -0.01074219, 0.03271484, -0.02026367, -0.02111816, 0.03735352, -0.04101562, 0.00054169, -0.04589844, 0.00515747, -0.05151367, 0.00588989, 0.00161743, 0.01586914, -0.03173828, -0.0456543, 0.02563477, -0.05078125, -0.00262451, 0.02246094, -0.07373047, 0.02099609, 0.00747681, -0.00744629, 0.01245117, 0.02331543, -0.00726318, -0.0016098, 0.06347656, 0.01623535, 0.04711914, 0.03515625, -0.01470947, 0.00872803, -0.02807617, 0.0090332, 0.00601196, 0.01226807, 0.00367737, 0.00239563, 0.02185059, 0.0065918, 0.02258301, -0.00994873, 0.0001421, -0.01202393, 0.00897217, 0.00527954, -0.00209045, 0.00775146, 0.04150391, 0.03344727, -0.00689697, 0.00405884, -0.00717163, 0.00946045, 0.02233887, 0.01428223, 0.03442383, 0.01196289, 0.01385498, -0.0390625, 0.02612305, -0.00075531, 0.01379395, 0.01171875, 0.00775146, 0.01043701, -0.01696777, -0.0088501, -0.0078125, 0.03125, -0.01574707, -0.03930664, 0.02050781, 0.01599121, -0.00323486, -0.0112915, 0.00964355, 0.03710938, -0.00732422, -0.00741577, -0.01586914, -0.012146, -0.02807617, -0.00457764, 0.02539062, 0.00460815, -0.02355957, 0.01586914, 0.00048256, -0.00909424, 0.00457764, -0.01879883, -0.00024605, -0.0300293, -0.01525879, 0.00012302, -0.02258301, -0.00723267, -0.00726318, 0.0246582, 0.001091, -0.04736328, 0.03417969, 0.0072937, 0.02905273, 0.03613281, -0.0234375, -0.00317383, 0.0189209, -0.04980469, -0.00078964, 0.01257324, -0.00276184, -0.01733398, -0.02758789, -0.01623535, 0.01733398, -0.01098633, -0.08837891, 0.00088882, -0.02075195, -0.0324707, 0.03466797, -0.00695801, -0.00213623, -0.01373291, 0.01531982, 0.01531982, 0.00689697, -0.02368164, 0.01104736, -0.00247192, 0.02905273, -0.01953125, 0.00202942, 0.02868652, 0.0057373, 0.046875, 0.00332642, 0.00601196, -0.01574707, -0.01660156, -0.00460815, 0.01269531, -0.02526855, 0.0020752, -0.00192261, 0.02453613, 0.02661133, 0.01251221, -0.02502441, -0.02612305, -0.01831055, 0.00185394, 0.0291748, -0.00230408, 0.01257324, 0.02111816, -0.00720215, -0.00382996, 0.04370117, 0.02587891, -0.00180817, -0.0112915, 0.01226807, 0.02416992, -0.01123047, -0.00312805, -0.03149414, -0.0189209, 0.00823975, -0.00534058, -0.00622559, -0.00439453, -0.01916504, -0.02807617, 0.00346375, 0.00463867, -0.0246582, 0.05126953, 0.00964355, -0.0177002, -0.02661133, 0.02160645, 0.01879883, -0.00759888, 0.00267029, 0.00588989, -0.02148438, -0.00500488, -0.0234375, 0.01159668, -0.00595093, 0.00854492, 0.00598145, 0.02209473, 0.01220703, -0.02856445, -0.01989746, 0.015625, 0.00592041, -0.01324463, 0.01489258, -0.00273132, -0.00457764, -0.01513672, 0.00077057, -5.054e-05, -0.00479126, -0.01928711, -0.00637817, -0.00982666, -0.0390625, -0.00408936, 0.03491211, 0.02294922, -0.00436401, 0.00552368, -0.03344727, -0.00017643, -0.0100708, 0.02258301, -0.00183868, -0.0201416, -9.108e-05, -0.01818848, -0.01531982, -0.03027344, -0.00442505, -0.00686646, 0.01489258, 0.01226807, 0.01696777, 0.00302124, 0.00976562, -0.07080078, 0.03540039, -0.02038574, 0.02685547, 0.01208496, 0.01293945, -0.00143433, 0.01312256, -0.02832031, -0.00698853, 0.01977539, 0.06738281, 0.05029297, 0.00628662, -0.03320312, -0.01257324, 0.01513672, -0.00524902, -0.01647949, 0.00107574, 0.00158691, 0.03295898, 0.0025177, -0.01123047, -0.00305176, -0.00059509, 0.00315857, -0.02331543, -0.01489258, 0.0291748, 0.00915527, -0.01544189, -0.02099609, -0.02026367, 0.00787354, -0.0144043, 0.00222778, -0.00860596, -0.01550293, 0.01190186, 0.01312256, -0.0050354, -0.0168457, 0.00193024, 0.00141144, -0.00854492, -0.01635742, -0.03198242, -0.00650024, -0.00939941, -0.00582886, 0.00946045, -0.02111816, -0.03686523, -0.00363159, -0.01275635, -0.0246582, -0.03027344, 0.01586914, -0.00518799, -0.01330566, 0.0123291, 0.00286865, -0.03637695, 0.0072937, -0.0071106, 0.00762939, 0.00958252, -4.26e-06, 0.02941895, 0.01269531, -0.00946045, -0.00350952, 0.00610352, 0.00325012, -0.01031494, -0.0032196, -0.03112793, -0.03979492, -0.00671387, 0.02612305, -0.02392578, 0.00087357, 0.02685547, 0.01843262, -0.02709961, 0.01538086, -0.00695801, -0.02233887, -0.00616455, -0.00445557, 0.03808594, 0.01141357, -0.00680542, 0.01721191, -0.00552368, -0.02124023, -0.00363159, -0.00646973, 0.00047302, 0.02258301, -0.00049973, 0.00613403, -0.03295898, -0.0123291, -0.00732422, 0.00402832, 0.0222168, 0.00286865, 0.02832031, 0.04199219, 0.00546265, -0.00799561, -0.02282715, -0.01324463, 0.02502441, 0.02209473, -0.00454712, 0.01025391, 0.00588989, -0.0456543, -0.01422119, -0.00531006, -0.01556396, 0.02087402, -0.01928711, 0.03149414, -0.03833008, 0.01806641, -0.02124023, -0.01586914, 0.01672363, -0.02746582, -0.02062988, -0.00221252, -0.00674438, -0.00068283, -0.00308228, 0.00842285, -0.00143433, 0.04248047, -0.01391602, -0.05908203, 0.015625, -0.00793457, 0.02160645, -0.02050781, 0.00653076, 0.00671387, 0.01611328, -0.01208496, -0.02624512, -0.01879883, 0.00598145, 0.00326538, 0.01782227, -0.00823975, -0.00078201, 0.03955078, -0.01159668, 0.015625, -0.0168457, -0.006073, 0.02954102, 0.01153564, -0.01220703, -0.03491211, 0.02087402, 0.02856445, -0.00500488, -0.00765991, 0.01965332, 0.00595093, 0.02258301, -0.01324463, -0.03015137, 0.02478027, 0.01226807, -0.02441406, 0.03173828, -0.0177002, 0.01239014, -0.04638672, 0.02783203, 0.01470947, 0.00328064, -0.0062561, -0.0057373, -0.00300598, -0.04125977, 0.02026367, 0.00891113, -0.05322266, 0.02197266, -0.02233887, -0.03662109, 0.00939941, -0.01361084, 0.00479126, 0.01074219, 0.00848389, 0.00215149, 0.00613403, -0.03466797, -0.0090332, -2.277e-05, -0.04711914, 0.00701904, -0.02209473, 0.01757812, 0.03393555, -0.02185059, 0.00325012, 0.01196289, -0.00056458, -0.03955078, -0.0062561, 0.00994873, -0.03320312, 0.00072098, 0.01373291, -0.03344727, -0.00595093, -0.02233887, 0.00805664, 0.04589844, -0.01843262, 0.00176239, 0.00650024, -0.02038574, 0.0065918, -0.00099945, 0.01544189, -0.01452637, 0.0016861, 0.00775146, -0.00805664, 0.0246582, -0.00527954, -0.00263977, 0.03112793, 0.00045204, -0.01000977, 0.02587891, 0.00224304, -0.02722168, -0.06298828, -0.01019287, -0.0067749, -0.00198364, -0.01538086, 0.0100708, -0.03125, -0.00285339, -0.02148438, 0.02099609, -0.03222656, 0.02941895, -0.02966309, -0.00933838, 0.00582886, -0.04467773, -0.0039978, 0.00878906, -0.00222778, -0.01843262, 0.01745605, 0.01757812, -0.03320312, -0.05541992, 0.01361084, -0.00369263, 0.00421143, -0.02600098, 0.0390625, -0.00052643, 0.03222656, 0.0039978, -0.01623535, -0.02722168, -0.02746582, -0.03808594, -0.01733398, -0.00173187, 0.03076172, -0.00350952, -0.01745605, 0.00026321, -0.00311279, -0.00415039, -0.00389099, -0.01086426, 0.00485229, -0.01843262, -0.01489258, 0.03369141, -0.01831055, 0.04394531, 0.02124023, -0.00331116, -0.02185059, -0.00418091, 0.07177734, 0.0213623, -0.0378418, -0.00640869, -0.0088501, -0.01226807, 0.00241089, 0.01422119, -0.00558472, -0.03015137, 0.01940918, 0.01965332, 0.00946045, 0.03833008, 0.02758789, 0.00408936, 0.02075195, 0.03710938, -0.0213623, -0.01196289, -0.00592041, -0.01312256, 0.05224609, -0.01782227, -0.01647949, 0.01733398, 0.03344727, 0.01031494, -0.00643921, 0.01318359, 0.01489258, -0.00476074, -0.00958252, 0.02758789, -0.00104523, 0.00479126, 0.02807617, -0.00390625, -0.00156403, 0.00092697, 0.02001953, 2.277e-05, -0.03857422, -0.00396729, -0.02905273, -0.00952148, -0.00393677, -0.03637695, 0.015625, 0.03271484, -0.02868652, 0.01422119, 0.0177002, 0.01098633, -0.03808594, -0.00585938, 0.02355957, -0.01251221, -0.05053711, 0.0078125, -0.01043701, 0.04174805, -0.00610352, 0.02258301, -0.00273132, -0.00640869, -0.00909424, 0.04223633, 0.02880859, 0.00619507, -0.00063324, 0.00830078, 0.04956055, -0.00405884, -0.02172852, -0.00270081, -0.00485229, 0.04663086, 0.00509644, 0.0019455, 0.01525879, -0.01977539, 0.01031494, 0.0390625, -0.02636719, 0.02404785, 0.01245117, -0.02404785, -0.0234375, 0.01477051, -0.02185059, 0.02185059, -0.02294922, 0.00096893, 0.01245117, 0.00030708, 0.01672363, -0.01452637, -0.02832031, 0.04321289, 0.02514648, 0.01635742, -0.02661133, -0.01647949, 0.02209473, -0.02490234, -0.01031494, -0.00044823, 0.00454712, -0.03637695, -0.0020752, 0.02770996, -0.03222656, -0.00646973, 0.03588867, -0.00133514, -0.00836182, 0.00622559, 0.03662109, 0.015625, 0.05102539, -0.00061798, 0.01831055, -0.03833008, 0.00196838, -0.00717163, -0.00346375, 0.00135803, -0.0201416, 0.02539062, -0.00891113, 0.00546265, -0.01623535, -0.00180054, 0.00099182, -0.00058365, 0.03149414, -0.04174805, 0.00363159, 0.02075195, 0.0402832, 0.00515747, -0.03564453, -0.01525879, 0.02685547, -0.04272461, -0.02331543, -0.02758789, 0.00927734, 0.03686523, 0.0002203, -0.01177979, -0.00717163, -0.02856445, 0.02661133, 0.0100708, 0.02197266, -0.00132751, 0.01043701, -0.00747681, 0.00072861, -0.01708984, 0.01202393, 0.00656128, -0.03125, -0.01818848, 0.00994873, 0.02050781, -0.00842285, -0.06835938, 0.01391602, -0.01159668, -0.00077057, -0.00521851, -0.02124023, 0.00314331, 0.02880859, -0.02502441, 0.03491211, 0.03271484, 0.01721191, 0.00939941, 0.02294922, -0.01220703, -0.01074219, -0.00442505, -0.02807617, -0.0045166, 0.00169373, 0.00637817, 0.01647949, -0.02038574, -0.00209045, -0.01403809, -0.01422119, -0.01745605, 0.0135498, 0.00570679, 0.01324463, -0.01519775, -0.00704956, -0.00704956, 0.00799561, 0.01660156, 0.01190186, 0.0324707, -0.01818848, -0.00817871, -0.01904297, 0.01544189, -0.00146484, 0.03088379, -0.02258301, -0.00411987, -0.01269531, -0.00191498, -0.02648926, -3.266e-05, 0.00891113, 0.00643921, -0.05493164, -0.00656128, 0.00141144, 0.01757812, 0.02038574, -0.01647949, 0.00019932, -0.02685547, 0.02185059, -0.0057373, 0.01477051, 0.0045166, 0.00091171, -0.0222168, 0.00019264, -0.02905273, 0.01733398, 0.01757812, -0.0279541, -0.0300293, 0.01275635, -7.105e-05, 0.04638672, -0.02331543, 0.01721191, -0.00115204, 0.01177979, 0.01818848, -0.02563477, -0.04467773, 0.0043335, 0.01843262, 0.00439453, 0.0135498, 0.00046158, 0.00872803, 0.01672363, 0.01599121, 0.01916504, 0.04956055, -0.00744629, 0.02111816, -0.01965332, 0.01300049, 0.04077148, 0.00665283, -0.0090332, 0.01446533, -0.03112793, -0.01556396, -0.00396729, 0.0055542, 0.00772095, -0.01574707, 0.01696777, 0.0234375, 0.03442383, 0.03063965, 0.00043488, 0.01367188, 0.03637695, 0.02502441, -0.01574707, 0.01196289, 0.05834961, 0.05395508, -0.01049805, 6.819e-05, 0.00720215, 0.00315857, 0.01367188, 0.00759888, 0.0027771, -0.01379395, 0.02148438, -0.00454712, 0.00512695, 0.01281738, 0.01818848, 0.01483154, 0.04418945, -0.00598145, 0.0222168, 0.01177979, 0.00610352, 0.00010824, -0.01190186, 0.00283813, 0.00071335, -0.00717163, 0.02062988, 0.01361084, 0.00994873, -0.01647949, 0.01843262, 0.00753784, -0.01428223, -0.01989746, -0.01904297, 0.02099609, -0.00592041, 0.00408936, 0.00439453, 0.00299072, -0.00662231, -0.0390625, 0.00595093, 0.00150299, -0.01806641, 0.03198242, 0.06298828, 0.02880859, -0.02062988, -0.01599121, 0.00088882, -0.03198242, -0.00561523, -0.0168457, -0.01202393, 0.0189209, -0.04223633, -0.03417969, 0.01025391, 0.01647949, 0.00848389, -0.0246582, 0.01531982, 0.01464844, -0.01733398, -0.00564575, -0.01403809, -0.00540161, 0.03125, -0.02111816, 0.00558472, -0.03491211, 0.00576782, -0.00897217, 0.00250244, 0.01147461, 0.00047302, 0.04199219, -0.0020752, 0.01245117, -0.00689697, -0.01147461, -0.01556396, 0.00326538, -0.00052261, 0.00338745, -0.0234375, 0.00598145, -0.03039551, -0.0090332, 0.00622559, -0.006073, -0.00069809, -0.00628662, 0.03173828, 0.01379395, -0.02124023, -0.01422119, 0.0246582, 0.01525879, 0.01147461, 0.00100708, 0.01293945, 0.00153351, 0.01586914, -0.03564453, -0.00315857, -0.04663086, 0.03833008, 0.0030365, -0.04516602, 0.03613281, -0.01623535, 0.0123291, -0.01068115, 0.0007782, 0.00662231, -0.01733398, -0.00393677, 0.00091934, -0.02233887, -0.00096512, 0.00283813, -0.02648926, 0.03271484, -0.01513672, -0.05517578, -0.0300293, -0.00946045, 0.0135498, 0.0255127, -0.11523438, -0.02624512, -0.02160645, -0.01794434, -0.00427246, 0.0145874, 0.01708984, -0.01098633, -0.04101562, -0.04370117, -0.012146, -0.02001953, 0.00817871, 0.01391602, 0.01794434, 0.05957031, -0.02978516, 0.00457764, 0.00427246, 0.03417969, -0.00221252, -0.01019287, -0.01721191, 0.00811768, -0.01190186, -0.03979492, -0.01965332, 0.02539062, 0.02526855, 0.00570679, 0.01074219, 0.0100708, 0.02392578, 0.00469971, 0.01416016, 0.00909424, -0.03076172, 0.03271484, 0.03466797, 0.00346375, -0.00976562, 0.0402832, 0.00610352, 0.00205994, -0.00427246, 0.05517578, 0.00257874, 0.05517578, 0.0534668, 0.06396484, 0.00628662, -0.0078125, 0.01977539, -0.03833008, 0.0062561, -0.00212097, 0.00289917, -0.00309753, 0.00714111, 0.00927734, 0.04492188, -0.00653076, 0.00102234, 0.01831055, -0.04614258, -0.01123047, -0.04125977, 0.00485229, -0.02001953, -0.03833008, 0.03149414, 0.01293945, -0.03808594, 0.00424194, -0.03393555, -0.00848389, 0.04248047, 0.00747681, 0.00860596, -0.04199219, -0.03710938, 0.01324463, 0.02514648, 0.01391602, -0.02185059, -0.01348877, -0.02966309, 0.00634766, -0.01123047, 0.01190186, -0.03369141, 0.02429199, 0.03735352, -0.00653076, 0.0213623, 0.03540039, -0.00268555, -0.00823975, -0.02661133, -0.01202393, -0.02648926, -0.01611328, -0.01452637, 0.00061417, 0.05273438, 0.02624512, 0.03466797, 0.03198242, -0.02062988, -0.00086212, -0.0402832, -0.01556396, 0.01623535, 0.0279541, -0.01452637, 0.0008049, -0.02600098, 0.0014801, -0.00291443, -0.00817871, -0.03662109, 0.0112915, -0.03588867, 0.02185059, 0.00180054, 0.02416992, -0.00958252, -0.00113678, -0.00390625, -0.00915527, 0.07128906, 0.01037598, -0.01708984, 0.00646973, 0.03515625, 0.03515625, -0.01916504, -0.0072937, -0.00445557, -0.0480957, -0.02490234, -0.02893066, 0.03930664, 0.01611328, 0.02416992, 0.01464844, 0.02062988, -0.01794434, -0.01599121, 0.00138855, -0.01153564, 0.01470947, -0.01470947, 0.03271484, -0.02734375, 0.00674438, -0.00058365, -0.00350952, -0.00059891, -0.01153564, -0.03466797, 0.00933838, 0.04052734, 0.01464844, -0.03857422, 0.02075195, 0.04663086, 0.01281738, 0.02258301, -0.00202942, 0.00320435, 0.03735352, -0.02075195, 0.00570679, 0.00564575, 0.01721191, 0.03149414, 0.00897217, -2.205e-05, 0.00396729, -0.04882812, 0.01135254, 0.01647949, -0.01055908, 0.00212097, 0.01281738, 0.02087402, 0.02575684, -0.01379395, 0.03271484, -0.02526855, -0.02392578, -0.01342773, 0.0189209, -0.03515625, 0.02514648, 0.01586914, -0.01300049, -0.01611328, 0.0255127, 0.00552368, 0.00497437, 0.02868652, 0.0300293, -0.02001953, -0.00300598, -0.02734375, 0.01190186, 0.01300049, -0.00668335, -0.0035553, -0.04614258, -0.03198242, 0.02172852, 0.01013184, -0.02099609, 0.00213623, 0.00144196, 0.03369141, 0.02111816, 0.02661133, -0.01000977, -0.00164795, 0.00361633, 0.0037384, 0.04736328, -0.04614258, -0.01184082, -0.02258301, 0.02050781, 0.00012589, 0.01049805, -0.00769043, -0.02844238, -0.02734375, -0.0222168, 0.0003643, 0.00454712, 0.02783203, -0.01916504, 0.02050781, -0.01300049, -0.00078964, -0.02612305, 0.02709961, -0.03710938, 0.02319336, -0.00233459, -0.00878906, 0.0234375, -0.00653076, -0.01068115, 0.0090332, 0.02758789, 0.012146, -0.03588867, 0.04101562, -0.01489258, -0.00622559, -0.00704956, 0.00509644, -0.02124023, 0.02246094, 0.00112915, -0.04101562, -0.00601196, -0.0035553, -0.02905273, 0.0078125, -0.01080322, 0.01904297, -0.03198242, 0.00628662, -0.02185059, -0.00854492, 0.03344727, 0.01586914, 0.00848389, -0.00921631, 0.01153564, 0.03100586, 0.00753784, 0.00111389, -0.00189209, -0.0111084, 0.00198364, -0.00061035, 0.04223633, -0.01013184, 0.01757812, 0.02233887, -0.01464844, -0.03088379, -6.914e-05, -0.03686523, -0.0246582, 0.00512695, -0.00738525, 0.00144196, -0.01635742, -0.01806641, 0.00364685, 0.00080109, 0.01025391, 0.06591797, -0.01745605, -0.00921631, -0.02941895, -0.00454712, -0.0111084, -0.00811768, -0.0246582, -0.03491211, 0.01483154, -0.00933838, 0.01086426, 0.01672363, 0.01672363, 0.00125885, -0.00909424, 0.00595093, 0.01635742, -0.01489258, -0.0014267, -0.03833008, -0.01043701, -0.02368164, 0.02832031, -0.01385498, 0.00592041, 0.02783203, -0.03198242, 0.01281738, 0.01324463, -0.03491211, 0.00982666, -0.03833008, 0.00107574, 0.02832031, 0.00300598, 0.01745605, 0.00276184, 0.00628662, 0.00848389, 0.02148438, -0.01989746, 0.01086426, 0.03417969, -0.02270508, -0.01434326, -0.03198242, 0.02148438, 0.01495361, -0.01818848, 0.01940918, -0.00866699, -0.02160645, -0.03417969, -0.01696777, -0.00183868, -0.02404785, 0.00958252, -0.01068115, 0.02758789, -0.02209473, -0.00046349, 0.00279236, -0.03857422, 0.02685547, 0.00793457, 0.00060272, -0.01379395, 0.09619141, 0.00022507, 0.01220703, 0.01019287, -0.0088501, -0.03588867, 0.03271484, 0.02587891, 0.00601196, -0.003479, -0.01477051, 0.02099609, 0.01098633, -0.00473022, -0.015625, 0.01080322, -0.01452637, 0.01373291, -0.02636719, -0.03100586, 0.0246582, 0.01116943, -0.00674438, 0.01464844, 0.00111389, 0.01843262, -0.01647949, -0.02539062, 0.00076675, -0.00361633, -0.00939941, -0.0098877, 0.04150391, -0.01721191, 0.00213623, 0.05615234, -0.02099609, -0.02270508, 0.0111084, -0.00154114, -0.01184082, -0.01733398, 0.00448608, 0.01574707, -0.0135498, -0.00276184, 0.00604248, -0.01159668, 0.01525879, -0.01611328, 0.00482178, -0.03393555, 0.02355957, 0.03271484, 0.0078125, 0.00976562, 0.00741577, 0.02099609, -0.01513672, -0.0246582, -0.00982666, -0.00202942, -0.01116943, -0.00686646, 0.02868652, -0.0291748, 0.01855469, -0.02172852, -0.01867676, 0.00921631, -0.03564453, -0.00248718, 0.0067749, 0.00860596, -0.02514648, -0.02233887, 0.01312256, -0.00070572, -0.04467773, 0.01660156, -0.06152344, 0.02270508, -0.0300293, -0.01251221, -0.01379395, 0.04321289, 0.00039291, -0.00112915, -0.02404785, -0.02233887, -0.01904297, 0.00848389, -0.02075195, 0.02038574, 0.00041008, 0.05395508, 0.01550293, 0.01708984, 0.00061798, -0.03662109, 0.01190186, -0.0177002, -0.03515625, -0.02368164, 0.03088379, 0.0201416, 0.01489258, -0.00457764, -0.00704956, -0.02087402, 0.00866699, 0.00585938, 0.01916504, -0.00488281, 0.00686646, 0.0177002, -0.02087402, 0.02050781, 0.01068115, -0.0189209, -0.01940918, -0.03393555, -0.01000977, -0.00842285, -0.04711914, -0.00704956, 0.03393555, -0.01806641, 0.01489258, -0.03063965, 0.02526855, -0.01867676, 0.01306152, -0.03588867, 0.03369141, -0.02746582, -0.00182343, 0.02575684, 0.02478027, -0.01635742, 0.02148438, 0.02832031, 0.02636719, 0.00442505, -0.02758789, -0.00338745, -0.03125, 0.02062988, 0.02038574}
		assert.NoError(t, err, "Failed to get embedding for query")
		assert.NotEmpty(t, embedding, "Embedding should not be empty")

		searchParams := VectorSearchParams{
			IndexName:     "plotEmbeddingIndex",
			Path:          "plotEmbedding",
			K:             2,
			NumCandidates: 5,
		}

		results, err := async.Await(collection.VectorSearch(ctx, embedding, searchParams))
		assert.NoError(t, err, "Failed to perform vector search")
		assert.NotEmpty(t, results, "Vector search results should not be empty")

		// search might return any of the two below titles
		expectedResults := []string{"The Shaolin Temple", "Dragonslayer", "Banovic Strahinja"}
		assert.Len(t, results, 2, "Expected 2 nearest neighbours")
		assert.Contains(t, expectedResults, results[0].Doc.Title, "First result should be one of the expected titles")
		assert.Contains(t, expectedResults, results[1].Doc.Title, "Second result should be one of the expected titles")
	})

	t.Run("TestTextSearch", func(t *testing.T) {
		query := "shaolin medieval kings war"
		searchParams := TermSearchParams{
			IndexName: "plotIndex",
			Path:      []string{"plot", "title"},
			Limit:     2,
		}

		results, err := async.Await(collection.TermSearch(ctx, query, searchParams))
		assert.NoError(t, err, "Failed to perform text search")
		assert.NotEmpty(t, results, "Text search results should not be empty")

		// search might return any of the two below titles
		expectedResults := []string{"The Shaolin Temple", "Dragonslayer", "Banovic Strahinja"}
		assert.Len(t, results, 2, "Expected 2 search results")
		assert.Contains(t, expectedResults, results[0].Doc.Title, "First result should be one of the expected titles")
		assert.Contains(t, expectedResults, results[1].Doc.Title, "Second result should be one of the expected titles")
	})
}

func parseTestFixture(fixturePath string) ([]EmbeddedMovies, error) {
	fixture, err := os.Open(fixturePath)
	if err != nil {
		return nil, err
	}
	defer fixture.Close()

	reader := csv.NewReader(fixture)
	reader.Comma = '\t'
	reader.FieldsPerRecord = -1

	// Read first line - header
	_, err = reader.Read()
	if err != nil {
		return nil, err
	}

	var out []EmbeddedMovies
	for {
		record, err := reader.Read()
		if err == io.EOF {
			break
		} else if err != nil {
			return nil, err
		}

		year, _ := strconv.Atoi(record[2])

		movie := EmbeddedMovies{
			Title:     record[0],
			Plot:      record[1],
			Year:      year,
			Genres:    strings.Split(record[3], ","),
			Languages: strings.Split(record[4], ","),
			Cast:      strings.Split(record[5], ","),
		}

		embeddingStrings := strings.Split(record[6], ",")
		embedding := make([]float32, len(embeddingStrings))
		for i, s := range embeddingStrings {
			num, err := strconv.ParseFloat(s, 32)
			if err != nil {
				return nil, err
			}

			embedding[i] = float32(num)
		}

		movie.PlotEmbedding = bson.NewVector(embedding)
		out = append(out, movie)
	}

	return out, nil
}
